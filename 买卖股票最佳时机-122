class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int cnt = 0;
        for(int i = 0;i < prices.size()-1;i++){
            if(i == 0 || prices[i] < prices[i-1]){//找到股票出现下降趋势的位置 或者是首位
                int j = i;
                while(j <prices.size()-1 && prices[j+1] >= prices[j])//注意要把是否出界放到前面判断  寻找低点一直保持上升趋势的最高点
                    j++;
                cnt += prices[j]-prices[i];//找到最高点 算收益
            }
        }
        return cnt;
    }
};
//注意若想求收益最大值，则每个极小值到极大值都要作差后，加在一起
//另一种算法：相当于把相邻两个数作差 如果是正数就加上
// ！！！！！！不一定要整体算，可以一个一个算
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int profit = 0;
        for (int i = 1; i < prices.size(); i++) {
            int tmp = prices[i] - prices[i - 1];
            if (tmp > 0) profit += tmp;
        }
        return profit;
    }
};

作者：Krahets
链接：https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/solutions/12625/best-time-to-buy-and-sell-stock-ii-zhuan-hua-fa-ji/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
